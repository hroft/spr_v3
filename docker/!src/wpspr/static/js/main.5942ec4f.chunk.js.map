{"version":3,"sources":["component/CardItemMain/CardItemMain.js","App.js","serviceWorker.js","index.js"],"names":["CardItemMain","props","react_default","a","createElement","Fragment","data","filter","type","ptype","map","row","className","key","id","href","foto","src","alt","name","location","contact","time","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sstatet","setState","sstatea","state","onClick","CardItemMain_CardItemMain","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAGe,SAASA,EAAaC,GACnC,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACGJ,EAAMK,KACJC,OAAO,SAASD,GACf,OAAOA,EAAKE,OAASP,EAAMQ,QAE5BC,IAAI,SAAAC,GAAG,OACNT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OAAOC,IAAKF,EAAIG,IAC7BZ,EAAAC,EAAAC,cAAA,KAAGW,KAAMJ,EAAIK,MACXd,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eAAeK,IAAKN,EAAIK,KAAME,IAAI,MAEnDhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,cAAcD,EAAIQ,MAChCjB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,uBACbV,EAAAC,EAAAC,cAAA,SAAIO,EAAIS,UACRlB,EAAAC,EAAAC,cAAA,SAAIO,EAAIU,SACRnB,EAAAC,EAAAC,cAAA,SAAIO,EAAIW,uBCuBTC,cArCb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KAOR8B,QAAU,WACRP,EAAKQ,SAAS,CACZvB,MAAO,UAVQe,EAanBS,QAAU,WACRT,EAAKQ,SAAS,CACZvB,MAAO,SAbTe,EAAKU,MAAQ,CACX5B,KAAMA,EACNG,MAAO,IAJQe,wEAmBjB,OACEtB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,kBAAkBuB,QAASR,KAAKI,SAAlD,oDAGA7B,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,kBAAkBuB,QAASR,KAAKM,SAAlD,yCAIF/B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WACbV,EAAAC,EAAAC,cAACgC,EAAD,CAAc9B,KAAMqB,KAAKO,MAAM5B,KAAMG,MAAOkB,KAAKO,MAAMzB,iBA/B/C4B,aCOEC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5942ec4f.chunk.js","sourcesContent":["import React from 'react';\nimport './CardItemMain.css';\n\nexport default function CardItemMain(props) {\n  return (\n    <React.Fragment>\n      {props.data\n        .filter(function(data) {\n          return data.type === props.ptype;\n        })\n        .map(row => (\n          <div className=\"card\" key={row.id}>\n            <a href={row.foto}>\n              <img className=\"card-img-top\" src={row.foto} alt=\"\" />\n            </a>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{row.name}</h5>\n              <div className=\"card-text text-left\">\n                <p>{row.location}</p>\n                <p>{row.contact}</p>\n                <p>{row.time}</p>\n              </div>\n              {/* <a href=\"#\" className=\"btn btn-primary\">Go somewhere</a> */}\n            </div>\n          </div>\n        ))}\n    </React.Fragment>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardItemMain from \"./component/CardItemMain/CardItemMain\";\nimport data from \"./data/data.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: data,\n      ptype: \"\"\n    };\n  }\n\n  sstatet = () => {\n    this.setState({\n      ptype: \"torg\"\n    });\n  };\n  sstatea = () => {\n    this.setState({\n      ptype: \"apt\"\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>\n          <button className=\"btn btn-primary\" onClick={this.sstatet}>\n            Магазины\n          </button>\n          <button className=\"btn btn-primary\" onClick={this.sstatea}>\n            Аптеки\n          </button>\n        </nav>\n        <div className=\" wraper\">\n          <CardItemMain data={this.state.data} ptype={this.state.ptype} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}